import groovy.io.FileType

version = '0.1'

apply plugin: 'java'

configurations {
    antlr4
}

ext.antlr = [
        output : "${buildDir}/generated-src/antlr4",
        version: '4.3'
]

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        url "http://repository.jetbrains.com/all"
    }
}

dependencies {
    antlr4 "org.antlr:antlr4:${antlr.version}"
    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.10.195'
    compile "org.antlr:antlr4-runtime:${antlr.version}"
    compile 'org.anarres:jcpp:1.4.8-SNAPSHOT'
    compile 'com.intellij:annotations:12.0'
    testCompile 'org.jetbrains.spek:spek:0.1.145'
}

buildscript {
    repositories {
        maven {
            name 'JFrog OSS snapshot repo'
            url 'https://oss.jfrog.org/oss-snapshot-local/'
        }
        jcenter()
    }

    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.10.195'
    }
}

task compileAntlr() {
    description = 'Generates Java sources from ANTLR4 grammars.'
    mkdir antlr.output

    Map<String, List<String>> files = [:].withDefault { [] }
    def base = new File(projectDir, '/src/main/antlr4');
    base.eachFileRecurse(FileType.FILES) {
        if (!it.name.endsWith('.g4')) return
        def pkg = base.toURI().relativize(it.parentFile.toURI()).toString().replaceAll('/$', '').replace(File.separator, '.')
        files[pkg] << it.toString().replace(base.toString() + '/', '')
    }
    files.each { pkg, grammars ->
        doLast {
            javaexec {
                classpath configurations.all
                workingDir = base.toString()
                println 'found ' + grammars
                main = 'org.antlr.v4.Tool'
                args = ["-o", "${antlr.output}", "-package", pkg, grammars].flatten()
            }
        }
    }
}

apply plugin: 'kotlin'

compileJava {
    dependsOn 'compileAntlr'
    dependsOn.remove 'compileKotlin'
    source antlr.output
}

compileKotlin {
    dependsOn 'compileJava'
    source antlr.output
}

compileTestKotlin {
    source "${projectDir}/src/main/kotlin"
}

clean {
    delete antlr.output
}
