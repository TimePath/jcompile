apply plugin: 'maven-publish'
group = 'com.timepath'
version = '0.1-SNAPSHOT'
apply plugin: 'application'

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

def base = 'com.timepath.compiler'
task createAllStartScripts() << {}
def scripts = [
        'compile'  : "${base}.CompilerPackage",
        'transpile': "${base}.backend.cpp.CppPackage"
]
mainClassName = scripts['compile']
scripts.each { scriptName, className ->
    def t = tasks.create(name: scriptName + 'StartScript', type: CreateStartScripts) {
        mainClassName = className
        applicationName = scriptName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtime
    }
    applicationDistribution.into("bin") {
        from(t)
        fileMode = 0755
    }
    createAllStartScripts.dependsOn(t)
}

buildscript {
    ext.versions = [
            antlr               : '4.5',
            jcpp                : '1.4.8-SNAPSHOT',
            jetbrainsAnnotations: '12.0',
            kotlin              : '0.11.91.1',
            junit               : '4.12'
    ]

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    // spek
    maven {
        url "http://repository.jetbrains.com/all"
    }
}

apply plugin: 'kotlin'

sourceSets {
    main {
        java { srcDirs = [] }
    }
    test {
        java { srcDirs = [] }
    }
}

test { exclude '**/*$*' }

dependencies {
    compile project('api')
    compile project('frontends:quakec')
    compile project('backends:q1vm')
    compile "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
    compile "com.intellij:annotations:${versions.jetbrainsAnnotations}"
    testCompile "junit:junit:${versions.junit}"
}
