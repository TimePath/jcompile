buildscript {
    ext.versions = [
            kotlin: '1.0.0-beta-2422',
            junit : '4.12',
            antlr : '4.5',
            jcpp  : '1.4.12',
    ]

    repositories {
        mavenLocal()
        mavenCentral()
        // antlr4 plugin
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath 'me.champeau.gradle:antlr4-gradle-plugin:0.1'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
    }
}

plugins {
    id "org.standardout.versioneye" version "1.0.1"
}

apply plugin: 'com.github.kt3k.coveralls'

apply plugin: 'application'

def base = 'com.timepath.compiler'
task createAllStartScripts() << {}
def scripts = [
        'compile'  : "${base}.Main",
        'transpile': "${base}.backend.cpp.CPPPrinter"
]
mainClassName = scripts['compile']
scripts.each { scriptName, className ->
    tasks.create(name: 'run-' + scriptName, type: JavaExec, dependsOn: 'classes') {
        main = className
        classpath = sourceSets.main.runtimeClasspath
        System.getProperty("exec.args")?.with {
            args it.split()
        }
    }
    def t = tasks.create(name: scriptName + 'StartScript', type: CreateStartScripts) {
        mainClassName = className
        applicationName = scriptName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtime
    }
    applicationDistribution.into('bin') {
        from t
        fileMode = 0755
    }
    createAllStartScripts.dependsOn(t)
}

allprojects { p ->

    group = 'com.timepath'
    version = '0.1-SNAPSHOT'

    apply plugin: 'kotlin'

    apply plugin: 'maven-publish'

    apply plugin: 'jacoco'

    task sourceJar(type: Jar) { from sourceSets.main.allSource }

    publishing.publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar { classifier "sources" }
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local' }
    }

    sourceSets {
        main.java.srcDirs = []
        test.java.srcDirs = []
    }

    test.exclude '**/*$*'

    dependencies {
        compile 'com.timepath:commons:1.0-SNAPSHOT'

        if (p != project(':api'))
            compile project(':api')

        compile "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
        testCompile "junit:junit:${versions.junit}"
    }
}

dependencies {
    compile project('frontends:quakec')
    compile project('backends:cpp')
    compile project('backends:q1vm')
}

def jacocoProjects = allprojects

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all jacocoProjects'
    // dependsOn jacocoProjects.test

    additionalSourceDirs = files(jacocoProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(jacocoProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(jacocoProjects.sourceSets.main.output)
    // executionData = files(jacocoProjects.jacocoTestReport.executionData) // FIXME
    executionData = fileTree(project.rootDir.absolutePath).include('**/build/jacoco/*.exec')
    reports {
        html.enabled = true
        xml.enabled = true
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

project.gradle.taskGraph.whenReady { taskGraph ->
    def report = taskGraph.allTasks.find { it.name == "jacocoRootReport" }
    if (report) {
        def testFailures = 0
        project.tasks.withType(Test).each { test ->
            test.ignoreFailures = true
            test.afterSuite { td, tr ->
                if (!td.parent) {
                    testFailures = tr.failedTestCount
                }
            }
        }
        report.doLast {
            if (testFailures) {
                throw new Exception("There were ${testFailures} test failures")
            }
        }
    }
}

coveralls {
    sourceDirs = jacocoProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
    onlyIf { System.env.'CI' }
}
