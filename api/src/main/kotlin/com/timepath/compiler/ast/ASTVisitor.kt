package com.timepath.compiler.ast

fun main(args: Array<String>) {
    org.reflections.Reflections("com.timepath")
            .getSubTypesOf(javaClass<Expression>())
            .sortBy { it.getName() }
            .forEach {
                println("fun visit(e: " + it.toString()
                        .replace("$", ".")
                        .replace("class com.timepath.compiler.ast.", "") + ")")
            }
}

fun ASTVisitor.visit(e: Expression): Unit {
    javaClass.getMethod("visit", e.javaClass)(this, e)
}

trait ASTVisitor {
    fun visit(e: BinaryExpression)
    fun visit(e: BinaryExpression.Add)
    fun visit(e: BinaryExpression.AddAssign)
    fun visit(e: BinaryExpression.And)
    fun visit(e: BinaryExpression.AndAssign)
    fun visit(e: BinaryExpression.Assign)
    fun visit(e: BinaryExpression.BitAnd)
    fun visit(e: BinaryExpression.BitOr)
    fun visit(e: BinaryExpression.Comma)
    fun visit(e: BinaryExpression.Divide)
    fun visit(e: BinaryExpression.DivideAssign)
    fun visit(e: BinaryExpression.Eq)
    fun visit(e: BinaryExpression.ExclusiveOr)
    fun visit(e: BinaryExpression.ExclusiveOrAssign)
    fun visit(e: BinaryExpression.Ge)
    fun visit(e: BinaryExpression.Gt)
    fun visit(e: BinaryExpression.Le)
    fun visit(e: BinaryExpression.Lsh)
    fun visit(e: BinaryExpression.LshAssign)
    fun visit(e: BinaryExpression.Lt)
    fun visit(e: BinaryExpression.Modulo)
    fun visit(e: BinaryExpression.ModuloAssign)
    fun visit(e: BinaryExpression.Multiply)
    fun visit(e: BinaryExpression.MultiplyAssign)
    fun visit(e: BinaryExpression.Ne)
    fun visit(e: BinaryExpression.Or)
    fun visit(e: BinaryExpression.OrAssign)
    fun visit(e: BinaryExpression.Rsh)
    fun visit(e: BinaryExpression.RshAssign)
    fun visit(e: BinaryExpression.Subtract)
    fun visit(e: BinaryExpression.SubtractAssign)
    fun visit(e: BlockExpression)
    fun visit(e: BreakStatement)
    fun visit(e: ConditionalExpression)
    fun visit(e: ConstantExpression)
    fun visit(e: ContinueStatement)
    fun visit(e: DeclarationExpression)
    fun visit(e: FunctionExpression)
    fun visit(e: GotoExpression)
    fun visit(e: IndexExpression)
    fun visit(e: LabelExpression)
    fun visit(e: LoopExpression)
    fun visit(e: MemberExpression)
    fun visit(e: MemoryReference)
    fun visit(e: MethodCallExpression)
    fun visit(e: Nop)
    fun visit(e: ParameterExpression)
    fun visit(e: ReferenceExpression)
    fun visit(e: ReturnStatement)
    fun visit(e: StructDeclarationExpression)
    fun visit(e: SwitchExpression)
    fun visit(e: SwitchExpression.Case)
    fun visit(e: UnaryExpression)
    fun visit(e: UnaryExpression.Address)
    fun visit(e: UnaryExpression.BitNot)
    fun visit(e: UnaryExpression.Cast)
    fun visit(e: UnaryExpression.Dereference)
    fun visit(e: UnaryExpression.Minus)
    fun visit(e: UnaryExpression.Not)
    fun visit(e: UnaryExpression.Plus)
    fun visit(e: UnaryExpression.Post)
    fun visit(e: UnaryExpression.PostDecrement)
    fun visit(e: UnaryExpression.PostIncrement)
    fun visit(e: UnaryExpression.PreDecrement)
    fun visit(e: UnaryExpression.PreIncrement)
}
